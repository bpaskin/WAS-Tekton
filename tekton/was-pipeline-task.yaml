apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: was-deploy-app 
  nsamespace: was
spec:
  params:
      - name: APP_NAME
        description: The name of the application
        default: 'was-tekton'
        type: string
      - name: APP_VERSION
        description: The version of the application
        default: '1.0'
        type: string
      - name: DEPLOY_PROJECT
        description: The project where you deploy the app
        default: 'was'
        type: string  
      - name: MAX_PODS
        description: max numnber of pods to scale
        default: '2'
        type: string  

  workspaces:
  - name: output
    description: name of the selector to be used
    mountPath: /was/selector

  steps:
      - name: create-deployment
        image: quay.io/openshift/origin-cli:latest
        workingDir: /workspace/source
        command: ["/bin/bash", "-c"]
        args:
          - |-
            oc get service $(params.APP_NAME) -n $(params.DEPLOY_PROJECT) > /dev/null 2>/dev/null
           
            if [  $? -eq 0 ]
            then
              SELECTOR=`oc get service $(params.APP_NAME) -n $(params.DEPLOY_PROJECT) -o jsonpath='{.spec.selector.app}'` 
            else
              SELECTOR="$(params.APP_NAME)-1"
            fi
            
            if [[ $SELECTOR == $(params.APP_NAME)-0 ]]
            then
               SELECTOR="$(params.APP_NAME)-1"
            else
               SELECTOR="$(params.APP_NAME)-0"
            fi
            
            echo $SELECTOR > $(workspaces.output.path)/selector
            echo "selector = $SELECTOR"
            
            oc get deployment $SELECTOR -n $(params.DEPLOY_PROJECT) > /dev/null 2>&1
            
            if [ $? -eq 0 ]
            then
              echo "Deployment already exists... rolling out new image"
              oc set image deployment/$SELECTOR -n $(params.DEPLOY_PROJECT) $SELECTOR=image-registry.openshift-image-registry.svc:5000/$(params.DEPLOY_PROJECT)/$(params.APP_NAME):$(params.APP_VERSION)
              exit 0
            fi 
 
            cat <<EOF | oc create -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: $SELECTOR
              namespace: $(params.DEPLOY_PROJECT)
              labels:
                app: $SELECTOR
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: $SELECTOR
              template:
                metadata:
                  labels:
                    app: $SELECTOR
                spec:
                  containers:
                  - name: $SELECTOR
                    image: image-registry.openshift-image-registry.svc:5000/$(params.DEPLOY_PROJECT)/$(params.APP_NAME):$(params.APP_VERSION)
                  ports:
                    - containerPort: 9080
                      name: http
                    - containerPort: 9443
                      name: https
                    - containerPort: 9043
                      name: console
                  resources:
                    requests: 
                      memory: 500Mi
                      cpu: 0.5
                    limits:
                      memory: 500Mi
                      cpu: 0.5
                  imagePullPolicy: Always
            EOF

      - name: create-service
        image: quay.io/openshift/origin-cli:latest
        workingDir: /workspace/source
        command: ["/bin/bash", "-c"]
        args:
          - |-
            SELECTOR=`cat $(workspaces.output.path)/selector`
            echo "selector = $SELECTOR"

            oc get service $(params.APP_NAME) -n $(params.DEPLOY_PROJECT) > /dev/null 2>&1
            
            if [ $? -eq 0 ]
            then
              echo "service exists, patching"
              oc patch service $(params.APP_NAME) -p '{"spec": {"selector": {"app":"'$SELECTOR'"}}}'
              exit 0
            fi

            cat <<EOF | oc create -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: $(params.APP_NAME)
              namespace: $(params.DEPLOY_PROJECT)
              labels:
                app: $(params.APP_NAME)
            spec:
              ports:
              - name: http
                port: 9080
                targetPort: 9080
                protocol: TCP
              - name: https
                port: 9443
                targetPort: 9443
                protocol: TCP
              - name: console
                port: 9043
                targetPort: 9043
                protocol: TCP
              selector:
                app: $SELECTOR
            EOF

      - name: create-route-ext
        image: quay.io/openshift/origin-cli:latest
        workingDir: /workspace/source
        command: ["/bin/bash", "-c"]
        args:
          - |-
            oc get route -n $(params.DEPLOY_PROJECT) $(params.APP_NAME)
            
            if [ $? -eq 0 ]
            then
               echo "Route exists for $(params.APP_NAME)"
               exit 0
            fi

            cat <<EOF | oc create -f -
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              name: $(params.APP_NAME)
              namespace: $(params.DEPLOY_PROJECT)
            spec:
              to:
                kind: Service
                name: $(params.APP_NAME)
              port:
                targetPort: https
              tls:
                termination: passthrough
            EOF

      - name: set-app-autoscale
        image: quay.io/openshift/origin-cli:latest
        workingDir: /workspace/source
        command: ["/bin/bash", "-c"]
        args:
          - |-
            SELECTOR=`cat $(workspaces.output.path)/selector`
            echo "selector = $SELECTOR"

            cat <<EOF | oc apply -f -
            kind: HorizontalPodAutoscaler
            apiVersion: autoscaling/v2beta2
            metadata:
              name: $SELECTOR
              namespace: $(params.DEPLOY_PROJECT)
            spec:
              scaleTargetRef:
                kind: Deployment
                name: $SELECTOR
                apiVersion: apps/v1
              minReplicas: 1
              maxReplicas: $(params.MAX_PODS)
              metrics:
                - type: Resource
                  resource:
                    name: cpu
                    target:
                      type: Utilization
                      averageUtilization: 50
            EOF
